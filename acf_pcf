import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

y = np.array([29,20,25,29,31,33,34,27,26,30,
              29,28,28,26,27,26,30,28,26,30,
              31,30,37,30,33,31,27,33,37,29,
              28,30,29,34,30,20,17,23,24,34,
              36,35,33,29,25,27,30,29,28,32])

# Time series plot
plt.figure(figsize=(10,4))
plt.plot(y, marker='o')
plt.title('Time Series Plot')
plt.xlabel('Period')
plt.ylabel('y_t')
plt.grid(True)
plt.show()

N = len(y)
y_mean = np.mean(y)
max_lags = 25

# ACF function
def calculate_acf(series, max_lags):
    n = len(series)
    demeaned_series = series - series.mean()
    c0 = (np.sum(demeaned_series**2) / N)

    acf_values = []
    for k in range(max_lags + 1):
        if k == 0:
            ck = c0
        else:
            ck = (np.sum(demeaned_series[:-k] * demeaned_series[k:]) / N)
        acf_values.append(ck / c0)

    return acf_values

# Calculate ACF
acf_vals = calculate_acf(y, max_lags)

# 95% confidence interval
conf_level = 2 / np.sqrt(N)

print("ACF VALUES WITH SIGNIFICANCE TESTING")
print("=" * 65)
print(f"{'Lag':<6} {'ACF':<10} {'Significant?':<12} {'Decision':<40}")
print("-" * 65)

for lag, val in enumerate(acf_vals):
    if lag == 0:
        significant = "N/A"
        decision = "ACF(0) = 1 (by definition)"
    else:
        # Hypothesis test
        if abs(val) > conf_level:
            significant = "Yes"
            decision = "Reject H0: Significant autocorrelation"
        else:
            significant = "No"
            decision = "Fail to reject H0: Not significant"

    print(f"{lag:<6} {val:<10.4f} {significant:<12} {decision:<40}")

# Plot with confidence bands
plt.stem(range(len(acf_vals)), acf_vals, basefmt=" ")
plt.axhline(0, color='black')
plt.axhline(conf_level, color='red', linestyle='--', label='95% Confidence Interval')
plt.axhline(-conf_level, color='red', linestyle='--')

plt.title("Sample ACF with Significance Testing")
plt.xlabel("Lag")
plt.ylabel("ACF")
plt.legend()
plt.grid(True, alpha=0.3)
plt.show()

# PACF
def calculate_pacf(y, lags):
    rho = calculate_acf(y, lags)   # rho_k = autocorrelation values
    pacf_vals = [1.0]  # PACF(0) = 1

    for k in range(1, lags+1):
        P_k = np.array([[rho[abs(i-j)] for j in range(k)] for i in range(k)])
        rho_k = np.array(rho[1:k+1])
        phi_k = np.linalg.solve(P_k, rho_k) # P_k * phi_k = rho_k
        pacf_vals.append(phi_k[-1])

    return np.array(pacf_vals)

# Calculate PACF
pacf_vals = calculate_pacf(y, max_lags)

# Significance testing
n = len(y)
conf_level = 2 / np.sqrt(n)  # Approximately 95% confidence interval

print("PACF VALUES WITH SIGNIFICANCE TESTING")
print("=" * 65)
print(f"{'Lag':<6} {'PACF':<10} {'Significant?':<12} {'Decision':<40}")
print("-" * 65)

for lag, val in enumerate(pacf_vals):
    if lag == 0:
        significant = "N/A"
        decision = "PACF(0) = 1 (by definition)"
    else:
        # Null hypothesis: PACF(lag) = 0
        # Reject H0 if |PACF| > 2/root(n)
        if abs(val) > conf_level:
            significant = "Yes"
            decision = "Reject H0: Significant partial autocorrelation"
        else:
            significant = "No"
            decision = "Fail to reject H0: Not significant"

    print(f"{lag:<6} {val:<10.4f} {significant:<12} {decision:<40}")

# Plot with confidence bands
plt.stem(range(len(pacf_vals)), pacf_vals)
plt.axhline(0, color='black')
plt.axhline(conf_level, color='red', linestyle='--', label=f'95% Confidence Interval')
plt.axhline(-conf_level, color='red', linestyle='--')

plt.title("Sample PACF")
plt.xlabel("Lag")
plt.ylabel("PACF")
plt.legend()
plt.grid(True, alpha=0.3)
plt.show()
